"use strict";(self.webpackChunkseata_website=self.webpackChunkseata_website||[]).push([[97069],{58018:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var s=t(74848),r=t(28453);const a={title:"Setting Up Seata Demo Environment on Mac (AT Mode)",author:"portman xu",date:"2020/07/20",keywords:["seata","distributed transaction","demo","mac","at"]},o=void 0,i={permalink:"/blog/seata-at-demo-in-mac",editUrl:"https://github.com/apache/incubator-seata-website/blob/docusaurus/i18n/en/docusaurus-plugin-content-blog/seata-at-demo-in-mac.md",source:"@site/i18n/en/docusaurus-plugin-content-blog/seata-at-demo-in-mac.md",title:"Setting Up Seata Demo Environment on Mac (AT Mode)",description:"Seata Demo environment build under Mac (AT mode)",date:"2020-07-20T00:00:00.000Z",formattedDate:"July 20, 2020",tags:[],readingTime:7.2,hasTruncateMarker:!1,authors:[{name:"portman xu"}],frontMatter:{title:"Setting Up Seata Demo Environment on Mac (AT Mode)",author:"portman xu",date:"2020/07/20",keywords:["seata","distributed transaction","demo","mac","at"]},unlisted:!1,prevItem:{title:"Seata Source Code - Client Startup Process in Distributed Transactions",permalink:"/blog/seata-sourcecode-client-bootstrap"},nextItem:{title:"The Refactoring Journey of Seata RPC Module",permalink:"/blog/seata-rpc-refactor"}},c={authorsImageUrls:[void 0]},l=[{value:"Seata Demo environment build under Mac (AT mode)",id:"seata-demo-environment-build-under-mac-at-mode",level:2},{value:"Preface",id:"preface",level:2},{value:"Seata overview",id:"seata-overview",level:2},{value:"cloc code statistics",id:"cloc-code-statistics",level:2},{value:"Code quality",id:"code-quality",level:3},{value:"Demo code",id:"demo-code",level:3},{value:"Core problem solved",id:"core-problem-solved",level:3},{value:"Solution",id:"solution",level:2},{value:"Demo code structure",id:"demo-code-structure",level:2},{value:"Timing diagram",id:"timing-diagram",level:3},{value:"Run the demo",id:"run-the-demo",level:2},{value:"MySQL",id:"mysql",level:3},{value:"Create a table",id:"create-a-table",level:3},{value:"ZooKeeper",id:"zookeeper",level:3},{value:"Start the TC transaction coordinator",id:"start-the-tc-transaction-coordinator",level:3},{value:"Starting a simulated microservice in the IDE",id:"starting-a-simulated-microservice-in-the-ide",level:3},{value:"Use Business to verify results",id:"use-business-to-verify-results",level:3},{value:"Normal",id:"normal",level:4},{value:"exception",id:"exception",level:4},{value:"Questions to ponder",id:"questions-to-ponder",level:2},{value:"References",id:"references",level:2},{value:"Author information",id:"author-information",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"seata-demo-environment-build-under-mac-at-mode",children:"Seata Demo environment build under Mac (AT mode)"}),"\n",(0,s.jsx)(n.h2,{id:"preface",children:"Preface"}),"\n",(0,s.jsx)(n.p,{children:"Recently, because of work needs, research and study Seata distributed transaction framework, this article to learn the knowledge of their own record!"}),"\n",(0,s.jsx)(n.h2,{id:"seata-overview",children:"Seata overview"}),"\n",(0,s.jsx)(n.h2,{id:"cloc-code-statistics",children:"cloc code statistics"}),"\n",(0,s.jsx)(n.p,{children:"First look at the seata project cloc code statistics (as of 2020-07-20)"}),"\n",(0,s.jsxs)(n.p,{children:["! ",(0,s.jsx)(n.a,{href:"https://github.com/iportman/p/blob/master/blog/seata-at-demo-in-mac/cloc-seata.png?raw=true",children:"cloc-seata"})]}),"\n",(0,s.jsx)(n.p,{children:"The number of Java code lines is about 97K"}),"\n",(0,s.jsx)(n.h3,{id:"code-quality",children:"Code quality"}),"\n",(0,s.jsx)(n.p,{children:"Unit test coverage 50%"}),"\n",(0,s.jsxs)(n.p,{children:["! ",(0,s.jsx)(n.a,{href:"https://github.com/iportman/p/blob/master/blog/seata-at-demo-in-mac/coverage.png?raw=true",children:"cloc-seata"})]}),"\n",(0,s.jsx)(n.h3,{id:"demo-code",children:"Demo code"}),"\n",(0,s.jsx)(n.p,{children:"The demo code in this article is the seata-samples-dubbo module under the seata-samples project at the following address:"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/apache/incubator-seata-samples/tree/master/dubbo",children:"https://github.com/apache/incubator-seata-samples/tree/master/dubbo"})}),"\n",(0,s.jsx)(n.h3,{id:"core-problem-solved",children:"Core problem solved"}),"\n",(0,s.jsx)(n.p,{children:"The AT pattern Demo example gives a typical distributed transaction scenario:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"In a purchase transaction, it is necessary to:"}),"\n"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"deduct the inventory of a product"}),"\n",(0,s.jsx)(n.li,{children:"deduct the user account balance"}),"\n",(0,s.jsx)(n.li,{children:"generate a purchase order"}),"\n"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Obviously, all three steps must either succeed or fail, otherwise the system's data will be messed up."}),"\n",(0,s.jsx)(n.li,{children:"With the popular microservices architecture, generally speaking, inventory, account balance, and purchase order are three separate systems."}),"\n",(0,s.jsx)(n.li,{children:"Each microservice has its own database and is independent of each other."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Here is the scenario for distributed transactions."}),"\n",(0,s.jsxs)(n.p,{children:["! ",(0,s.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(92812).A+"",children:"Design diagram"})]}),"\n",(0,s.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,s.jsx)(n.p,{children:"The idea of the AT pattern to solve this problem is actually quite simple and is summarised in one sentence:"}),"\n",(0,s.jsx)(n.p,{children:"In the distributed transaction process, record the data to be modified before and after the modification of the value to the undo_log table, in case of abnormalities in the transaction, through the data in this to do a rollback!"}),"\n",(0,s.jsx)(n.p,{children:"Of course, the specific code to implement, I believe that many details are far from being so simple."}),"\n",(0,s.jsx)(n.h2,{id:"demo-code-structure",children:"Demo code structure"}),"\n",(0,s.jsx)(n.p,{children:"Clone the latest code from github."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"git clone git@github.com:apache/incubator-seata-samples.git\n``\n\nRead the Demo code structure\n\n```sh\n$ cd seata-samples/dubbo/\n$ tree -C -I 'target' .\n.\n\u251c\u2500\u2500 README.md\n\u251c\u2500 pom.xml\n\u251c\u2500\u2500 seata-samples-dubbo.iml\n\u2514\u2500\u2500 src\n\u2514\u2500\u2500 main\n\u251c\u2500 java\n\u2502 \u2514\u2500\u2500 io\n\u2502 \u2514\u2500\u2500 seata\n\u2502 \u2514\u2500\u2500 samples\n\u2502 \u2514\u2500 dubbo\n\u2502 \u251c\u2500\u2500 ApplicationKeeper.java\n\u2502 \u251c\u2500\u2500 Order.java\n\u2502 \u251c\u2500\u2500 service\n\u2502 \u2502 \u251c\u2500\u2500 AccountService.java\n\u2502 \u2502 \u251c\u2500\u2500 BusinessService.java\n\u2502 \u251c\u2500\u2500 OrderService.java \u2502 \u251c\u2500\u2500 OrderService.java\n\u2502 \u2502 \u251c\u2500\u2500 StorageService.java\n\u2502 \u2502 \u2514\u2500\u2500 impl\n\u2502 \u2502 \u251c\u2500\u2500 AccountServiceImpl.java\n\u2502 \u2502 \u251c\u2500\u2500 BusinessServiceImpl.java\n\u2502 \u2502 \u251c\u2500\u2500 OrderServiceImpl.java\n\u2502 \u2502 \u2514\u2500\u2500 StorageServiceImpl.java\n\u2502 \u2514\u2500\u2500 starter\n\u2502 \u251c\u2500\u2500 DubboAccountServiceStarter.java \u2502 \u251c\u2500\u2500 DubboAccountServiceStarter.java\n\u2502 \u251c\u2500\u2500 DubboBusinessTester.java\n\u2502 \u251c\u2500\u2500 DubboOrderServiceStarter.java\n\u2502 \u2514\u2500\u2500 DubboStorageServiceStarter.java\n\u2514\u2500\u2500 resources\n\u251c\u2500\u2500 file.conf\n\u251c\u2500\u2500 jdbc.properties\n\u251c\u2500\u2500 log4j.properties\n\u251c\u2500\u2500 registry.conf\n\u251c\u2500 spring\n\u2502 \u251c\u2500\u2500 dubbo-account-service.xml\n\u2502 \u251c\u2500\u2500 dubbo-business.xml\n\u2502 \u251c\u2500\u2500 dubbo-order-service.xml\n\u2502 \u2514\u2500\u2500 dubbo-storage-service.xml\n\u2514\u2500\u2500 sql\n\u251c\u2500\u2500 dubbo_biz.sql\n\u2514\u2500\u2500 undo_log.sql\n\n13 directories, 27 files\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The four *Starter classes under the io.seata.samples.dubbo.starter package emulate each of the four microservices described above"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Account"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Business"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Order"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Storage"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"4 services are standard dubbo services, configuration files in the seata-samples/dubbo/src/main/resources/spring directory"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"To run the demo, you need to start all four services, and Business is the last one to start."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The main logic is in io.seata.samples.dubbo.service, and the four implementation classes correspond to the business logic of the four microservices."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Configuration file for database information: src/main/resources/jdbc.properties"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"timing-diagram",children:"Timing diagram"}),"\n",(0,s.jsxs)(n.p,{children:["! ",(0,s.jsx)(n.a,{href:"https://github.com/iportman/p/blob/master/blog/seata-at-demo-in-mac/timing-diagram.png?raw=true",children:"cloc-seata"})]}),"\n",(0,s.jsx)(n.p,{children:"Ok, get going, Make It Happen!"}),"\n",(0,s.jsx)(n.h2,{id:"run-the-demo",children:"Run the demo"}),"\n",(0,s.jsx)(n.h3,{id:"mysql",children:"MySQL"}),"\n",(0,s.jsx)(n.h3,{id:"create-a-table",children:"Create a table"}),"\n",(0,s.jsx)(n.p,{children:"Execute the scripts dubbo_biz.sql and undo_log.sql in seata-samples/dubbo/src/main/resources/sql."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"mysql> show tables;\n+-----------------+\n| Tables_in_seata |\n+-----------------+\n| account_tbl |\n| order_tbl |\n| storage_tbl |\n| undo_log |\n+-----------------+\n4 rows in set (0.01 sec)\n"})}),"\n",(0,s.jsx)(n.p,{children:"After execution, there should be 4 tables in the database"}),"\n",(0,s.jsx)(n.p,{children:"Modify the seata-samples/dubbo/src/main/resources/jdbc.properties file"}),"\n",(0,s.jsx)(n.p,{children:"Modify the values of the variables according to the environment in which you are running MySQL"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-properties",children:"jdbc.account.url=jdbc:mysql://localhost:3306/seata\njdbc.account.username=your_username\njdbc.account.password=your_password\njdbc.account.driver=com.mysql.jdbc.\n# storage db config\njdbc.storage.url=jdbc:mysql://localhost:3306/seata\njdbc.storage.username=your_username\njdbc.storage.password=your_password\njdbc.storage.driver=com.mysql.jdbc.\n# order db config\njdbc.order.url=jdbc:mysql://localhost:3306/seata\njdbc.order.username=your_username\njdbc.order.password=your_password\njdbc.order.driver=com.mysql.jdbc.\n"})}),"\n",(0,s.jsx)(n.h3,{id:"zookeeper",children:"ZooKeeper"}),"\n",(0,s.jsx)(n.p,{children:"Start ZooKeeper, my local Mac is using Homebrew installation to start it"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"$ brew services start zookeeper\n==> Successfully started `zookeeper` (label: homebrew.\n\n$ brew services list\nName Status User Plist\ndocker-machine stopped\nelasticsearch stopped\nkafka stopped\nkibana stopped\nmysql started portman /Users/portman/Librar\ny/LaunchAgents/homebrew.mxcl.mysql.plist\nnginx stopped\npostgresql stopped\npostgresql stopped\nzookeeper started portman /Users/portman/Librar\ny/LaunchAgents/homebrew.mxcl.zookeeper.plist\n"})}),"\n",(0,s.jsx)(n.h3,{id:"start-the-tc-transaction-coordinator",children:"Start the TC transaction coordinator"}),"\n",(0,s.jsxs)(n.p,{children:["In this ",(0,s.jsx)(n.a,{href:"https://github.com/apache/incubator-seata/releases",children:"link"})," page, download the corresponding version of seata-server, I downloaded version 1.2.0 locally."]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Go to the directory where the file is located and extract the file."}),"\n",(0,s.jsx)(n.li,{children:"Enter the seata directory"}),"\n",(0,s.jsx)(n.li,{children:"Execute the startup script"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"$ tar -zxvf seata-server-1.2.0.tar.gz\n$ cd seata\n$ bin/seata-server.sh\n"})}),"\n",(0,s.jsx)(n.p,{children:"Observe the startup log for error messages, if everything is fine and you see the following Server started message, the startup was successful."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"2020-07-23 13:45:13.810 INFO [main]io.seata.core.rpc.netty.RpcServerBootstrap.start:155 -Server started ...\n"})}),"\n",(0,s.jsx)(n.h3,{id:"starting-a-simulated-microservice-in-the-ide",children:"Starting a simulated microservice in the IDE"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"First import the seata-samples project into your local IDE, I'm using IntelliJ IDEA here."}),"\n",(0,s.jsx)(n.li,{children:"Refresh the Maven project dependencies."}),"\n",(0,s.jsx)(n.li,{children:"Start the Account, Order and Storage services before Business can invoke them, the corresponding startup classes are:"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The corresponding startup classes are:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"io.seata.samples.dubbo.starter.DubboStorageServiceStarter\nio.seata.samples.dubbo.starter.DubboOrderServiceStarter\nio.seata.samples.dubbo.starter.DubboStorageServiceStarter\n"})}),"\n",(0,s.jsx)(n.p,{children:"After each service is started, you see this message indicating that the service was started successfully"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"Application is keep running ...\n"})}),"\n",(0,s.jsxs)(n.p,{children:["! ",(0,s.jsx)(n.a,{href:"https://github.com/iportman/p/blob/master/blog/seata-at-demo-in-mac/service-boot.png?raw=true",children:"cloc-seata"})]}),"\n",(0,s.jsx)(n.p,{children:"After successful startup, the account_tbl, storage_tbl tables will have two initialised data, the account balance and the product inventory respectively"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"mysql> SELECT * FROM account_tbl; SELECT * FROM storage_tbl;\n+----+---------+-------+\n| id | user_id | money |\n+----+---------+-------+ | id | user_id | money | ----+---------+-------+\n| 1 | U100001 | 999 |\n+----+---------+-------+ | 1 row in set (0.00.00)\n1 row in set (0.00 sec)\n\n+----+----------------+-------+\n| id | commodity_code | count |\n+----+----------------+-------+ | id | commodity_code | count | ----+----------------+-------+\n| 1 | C00321 | 100 |\n+----+----------------+-------+\n1 row in set (0.00 sec)\n"})}),"\n",(0,s.jsx)(n.h3,{id:"use-business-to-verify-results",children:"Use Business to verify results"}),"\n",(0,s.jsx)(n.h4,{id:"normal",children:"Normal"}),"\n",(0,s.jsx)(n.p,{children:"Still executing the main function of the DubboBusinessTester class in the IDE, the programme will exit automatically after running."}),"\n",(0,s.jsx)(n.p,{children:"If everything is working properly, everything should be committed for each microservice, and the data should be consistent."}),"\n",(0,s.jsx)(n.p,{children:"Let's take a look at the data changes in MySQL"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-sh",children:"mysql> SELECT * FROM account_tbl; SELECT * FROM order_tbl; SELECT * FROM storage_tbl.\n+----+---------+-------+\n| id | user_id | money |\n+----+---------+-------+ | id | user_id | money | ----+---------+-------+\n| 1 | U100001 | 599 |\n+----+---------+-------+ | 1 row in set (0.00.00)\n1 row in set (0.00 sec)\n\n+----+---------+----------------+-------+-------+\n| id | user_id | commodity_code | count | money |\n+----+---------+----------------+-------+-------+\n| 1 | U100001 | C00321 | 2 | 400 |\n+----+---------+----------------+-------+-------+\n1 row in set (0.00 sec)\n\n+----+----------------+-------+\n| id | commodity_code | count |\n+----+----------------+-------+ | id | commodity_code | count | ----+----------------+-------+\n| 1 | C00321 | 98 |\n+----+----------------+-------+\n1 row in set (0.00 sec)\n"})}),"\n",(0,s.jsx)(n.p,{children:"From the data of the 3 tables, we can see: account balance is deducted by 400; the order table is increased by 1 record; the product inventory is deducted by 2"}),"\n",(0,s.jsx)(n.p,{children:"This result is consistent with the logic of the programme, which means that there is no problem with the transaction."}),"\n",(0,s.jsx)(n.h4,{id:"exception",children:"exception"}),"\n",(0,s.jsx)(n.p,{children:"In fact, even if you do not join the distributed transaction control, everything is normal, the transaction itself will not be a problem"}),"\n",(0,s.jsx)(n.p,{children:"So let's focus on what happens when an exception occurs."}),"\n",(0,s.jsx)(n.p,{children:"Now I'm going to comment out the exception-throwing code in BusinessServiceImpl and execute DubboBusinessTester once more to see what happens."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'\t\t@Override\n    @GlobalTransactional(timeoutMills = 300000, name = "dubbo-demo-tx")\n    public void purchase(String userId, String commodityCode, int orderCount) {\n        LOGGER.info("purchase begin ... xid: " + RootContext.getXID());\n        storageService.deduct(commodityCode, orderCount); orderService.create(userId)\n        orderService.create(userId, commodityCode, orderCount); // release this exception throw.\n\n        //Leave this exception comment alone to simulate an exception in the application.\n        throw new RuntimeException("portman\'s foooooobar error.");;\n\n    }\n'})}),"\n",(0,s.jsx)(n.p,{children:"Next, I executed DubboBusinessTester once again, and during the execution I could see the exception message on the console"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'Exception in thread "main" java.lang.RuntimeException: portman\'s foooooobar error.\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now we look again at the data changes in MySQL and see that there are no changes in the data, indicating that the distributed transaction control has worked"}),"\n",(0,s.jsx)(n.h2,{id:"questions-to-ponder",children:"Questions to ponder"}),"\n",(0,s.jsx)(n.p,{children:"The above steps just demonstrates seata's simplest demo programme, more complex cases can be discussed and verified later!"}),"\n",(0,s.jsx)(n.p,{children:"There are still some questions and doubts in the learning process, followed by further study"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Global lock on the performance of the degree of impact"}),"\n",(0,s.jsx)(n.li,{children:"undo_log log can be rolled back to the original state, but if the data state has changed how to deal with (for example, increased user points have been spent by other local transactions)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"[What is Seata?] (/docs/overview/what-is-seata)"}),"\n",(0,s.jsx)(n.li,{children:"[Quickstart] (/docs/user/quickstart)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"author-information",children:"Author information"}),"\n",(0,s.jsx)(n.p,{children:"Xu Xiaoga, Software Architect, Kingdee"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/iportman",children:"Github"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},92812:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/files/architecture-6bdb120b83710010167e8b75448505ec.png"},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var s=t(96540);const r={},a=s.createContext(r);function o(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);