"use strict";(self.webpackChunkseata_website=self.webpackChunkseata_website||[]).push([[20963],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>g});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},b=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=s(n),b=r,g=d["".concat(p,".").concat(b)]||d[b]||u[b]||a;return n?o.createElement(g,i(i({ref:t},l),{},{components:n})):o.createElement(g,i({ref:t},l))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=b;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c[d]="string"==typeof e?e:r,i[1]=c;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}b.displayName="MDXCreateElement"},58919:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var o=n(87462),r=(n(67294),n(3905));const a={title:"Source Code Analysis of Seata-XID Propagation in Dubbo",keywords:["Seata","Dubbo","distributed transaction","spring"],description:"This article explores the propagation of XID in Seata-Dubbo through source code analysis.",author:"FUNKYE",date:"2020/01/01"},i="Seata-XID Transmission Source Code Analysis: Dubbo Edition",c={permalink:"/blog/seata-analysis-dubbo-transmit-xid",editUrl:"https://github.com/apache/incubator-seata-website/blob/docusaurus/i18n/en/docusaurus-plugin-content-blog/seata-analysis-dubbo-transmit-xid.md",source:"@site/i18n/en/docusaurus-plugin-content-blog/seata-analysis-dubbo-transmit-xid.md",title:"Source Code Analysis of Seata-XID Propagation in Dubbo",description:"This article explores the propagation of XID in Seata-Dubbo through source code analysis.",date:"2020-01-01T00:00:00.000Z",formattedDate:"January 1, 2020",tags:[],readingTime:2.225,hasTruncateMarker:!1,authors:[{name:"FUNKYE"}],frontMatter:{title:"Source Code Analysis of Seata-XID Propagation in Dubbo",keywords:["Seata","Dubbo","distributed transaction","spring"],description:"This article explores the propagation of XID in Seata-Dubbo through source code analysis.",author:"FUNKYE",date:"2020/01/01"},prevItem:{title:"Seata Config Module Source Code Analysis",permalink:"/blog/seata-analysis-config-modular"},nextItem:{title:"Seata TCC Module Source Code Analysis",permalink:"/blog/seata-analysis-tcc-modular"}},p={authorsImageUrls:[void 0]},s=[{value:"Source Code Analysis",id:"source-code-analysis",level:2},{value:"Key Points",id:"key-points",level:2}],l={toc:s},d="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,o.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Author: FUNKYE (Chen Jianbin), Principal Engineer at a certain Internet company in Hangzhou."),(0,r.kt)("h1",{id:"preface"},"Preface"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Let's start by examining the package structure. Under seata-dubbo and seata-dubbo-alibaba, there is a common class named TransactionPropagationFilter, corresponding to Apache Dubbo and Alibaba Dubbo respectively.")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"20200101203229",src:n(70030).Z,width:"422",height:"410"})),(0,r.kt)("h2",{id:"source-code-analysis"},"Source Code Analysis"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'package io.seata.integration.dubbo;\n\nimport io.seata.core.context.RootContext;\nimport org.apache.dubbo.common.Constants;\nimport org.apache.dubbo.common.extension.Activate;\nimport org.apache.dubbo.rpc.Filter;\nimport org.apache.dubbo.rpc.Invocation;\nimport org.apache.dubbo.rpc.Invoker;\nimport org.apache.dubbo.rpc.Result;\nimport org.apache.dubbo.rpc.RpcContext;\nimport org.apache.dubbo.rpc.RpcException;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\n@Activate(group = {Constants.PROVIDER, Constants.CONSUMER}, order = 100)\npublic class TransactionPropagationFilter implements Filter {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TransactionPropagationFilter.class);\n\n    @Override\n    public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n        // get local XID\n        String xid = RootContext.getXID();\n        String xidInterceptorType = RootContext.getXIDInterceptorType();\n        // get XID from dubbo param\n        String rpcXid = getRpcXid();\n        String rpcXidInterceptorType = RpcContext.getContext().getAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE);\n        if (LOGGER.isDebugEnabled()) {\n            LOGGER.debug("xid in RootContext[{}] xid in RpcContext[{}]", xid, rpcXid);\n        }\n        boolean bind = false;\n        if (xid != null) {\n            //transfer xid\n            RpcContext.getContext().setAttachment(RootContext.KEY_XID, xid);\n            RpcContext.getContext().setAttachment(RootContext.KEY_XID_INTERCEPTOR_TYPE, xidInterceptorType);\n        } else {\n            if (rpcXid != null) {\n                //bind XID\n                RootContext.bind(rpcXid);\n                RootContext.bindInterceptorType(rpcXidInterceptorType);\n                bind = true;\n                if (LOGGER.isDebugEnabled()) {\n                    LOGGER.debug("bind[{}] interceptorType[{}] to RootContext", rpcXid, rpcXidInterceptorType);\n                }\n            }\n        }\n        try {\n            return invoker.invoke(invocation);\n        } finally {\n            if (bind) {\n                //remove xid which has finished\n                String unbindInterceptorType = RootContext.unbindInterceptorType();\n                String unbindXid = RootContext.unbind();\n                if (LOGGER.isDebugEnabled()) {\n                    LOGGER.debug("unbind[{}] interceptorType[{}] from RootContext", unbindXid, unbindInterceptorType);\n                }\n                // if unbind xid is not current rpc xid\n                if (!rpcXid.equalsIgnoreCase(unbindXid)) {\n                    LOGGER.warn("xid in change during RPC from {} to {}, xidInterceptorType from {} to {} ", rpcXid, unbindXid, rpcXidInterceptorType, unbindInterceptorType);\n                    if (unbindXid != null) {\n                        // bind xid\n                        RootContext.bind(unbindXid);\n                        RootContext.bindInterceptorType(unbindInterceptorType);\n                        LOGGER.warn("bind [{}] interceptorType[{}] back to RootContext", unbindXid, unbindInterceptorType);\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * get rpc xid\n     * @return\n     */\n    private String getRpcXid() {\n        String rpcXid = RpcContext.getContext().getAttachment(RootContext.KEY_XID);\n        if (rpcXid == null) {\n            rpcXid = RpcContext.getContext().getAttachment(RootContext.KEY_XID.toLowerCase());\n        }\n        return rpcXid;\n    }\n\n}\n')),(0,r.kt)("p",null,"\u200b\t1. Based on the source code, we can deduce the corresponding logic processing."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"20200101213336",src:n(36830).Z,width:"775",height:"743"})),(0,r.kt)("h2",{id:"key-points"},"Key Points"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Dubbo @Activate Annotation:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.TYPE, ElementType.METHOD})\npublic @interface Activate {\n   \n    String[] group() default {};\n\n    \n    String[] value() default {};\n\n    \n    String[] before() default {};\n\n   \n    String[] after() default {};\n\n   \n    int order() default 0;\n}\n")),(0,r.kt)("p",null,"It can be analyzed that the @Activate annotation on Seata's Dubbo filter, with parameters @Activate(group = {Constants.PROVIDER, Constants.CONSUMER}, order = 100), indicates that both the Dubbo service provider and consumer will trigger this filter. Therefore, our Seata initiator will initiate an XID transmission. The above flowchart and code have clearly represented this."),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Dubbo implicit parameter passing can be achieved through setAttachment and getAttachment on RpcContext for implicit parameter transmission between service consumers and providers.")),(0,r.kt)("p",null,"Fetching: RpcContext.getContext().getAttachment(RootContext.KEY_XID);"),(0,r.kt)("p",null,"Passing: RpcContext.getContext().setAttachment(RootContext.KEY_XID, xid);"),(0,r.kt)("h1",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"For further source code reading, please visit the ",(0,r.kt)("a",{parentName:"p",href:"https://seata.apache.org/"},"Seata official website")))}u.isMDXComponent=!0},70030:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/20200101203229-b1377d653c52962ea621a450291bcf87.png"},36830:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/20200101213336-dec117cebba3464f980a52714f43ff7d.png"}}]);