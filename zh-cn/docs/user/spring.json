{
  "filename": "spring.md",
  "__html": "<h1>Spring支持</h1>\n<h2>注解拦截</h2>\n<h3>全局事务</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@GetMapping</span>(value = <span class=\"hljs-string\">\"testCommit\"</span>)\n<span class=\"hljs-meta\">@GlobalTransactional</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">testCommit</span><span class=\"hljs-params\">(@RequestParam(name = <span class=\"hljs-string\">\"id\"</span>,defaultValue = <span class=\"hljs-string\">\"1\"</span>)</span> Integer id,\n    @<span class=\"hljs-title\">RequestParam</span><span class=\"hljs-params\">(name = <span class=\"hljs-string\">\"sum\"</span>, defaultValue = <span class=\"hljs-string\">\"1\"</span>)</span> Integer sum) </span>{\n    Boolean ok = productService.reduceStock(id, sum);\n    <span class=\"hljs-keyword\">if</span> (ok) {\n        LocalDateTime now = LocalDateTime.now();\n        Orders orders = <span class=\"hljs-keyword\">new</span> Orders();\n        orders.setCreateTime(now);\n        orders.setProductId(id);\n        orders.setReplaceTime(now);\n        orders.setSum(sum);\n        orderService.save(orders);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"ok\"</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"fail\"</span>;\n    }\n}\n</code></pre>\n<h3>TCC</h3>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n * 定义两阶段提交 name = 该tcc的bean名称,全局唯一 commitMethod = commit 为二阶段确认方法 rollbackMethod = rollback 为二阶段取消方法\n * useTCCFence=true 为开启防悬挂\n * BusinessActionContextParameter注解 传递参数到二阶段中\n *\n * <span class=\"hljs-doctag\">@param</span> params  -入参\n * <span class=\"hljs-doctag\">@return</span> String\n */</span>\n<span class=\"hljs-meta\">@TwoPhaseBusinessAction</span>(name = <span class=\"hljs-string\">\"beanName\"</span>, commitMethod = <span class=\"hljs-string\">\"commit\"</span>, rollbackMethod = <span class=\"hljs-string\">\"rollback\"</span>, useTCCFence = <span class=\"hljs-keyword\">true</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(@BusinessActionContextParameter(paramName = <span class=\"hljs-string\">\"params\"</span>)</span> Map&lt;String, String&gt; params) </span>{\n    logger.info(<span class=\"hljs-string\">\"此处可以预留资源,或者利用tcc的特点,与AT混用,二阶段时利用一阶段在此处存放的消息,通过二阶段发出,比如redis,mq等操作\"</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * 确认方法、可以另命名，但要保证与commitMethod一致 context可以传递try方法的参数\n *\n * <span class=\"hljs-doctag\">@param</span> context 上下文\n * <span class=\"hljs-doctag\">@return</span> boolean\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">commit</span><span class=\"hljs-params\">(BusinessActionContext context)</span> </span>{\n    logger.info(<span class=\"hljs-string\">\"预留资源真正处理,或者发出mq消息和redis入库\"</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * 二阶段取消方法\n *\n * <span class=\"hljs-doctag\">@param</span> context 上下文\n * <span class=\"hljs-doctag\">@return</span> boolean\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">rollback</span><span class=\"hljs-params\">(BusinessActionContext context)</span> </span>{\n    logger.info(<span class=\"hljs-string\">\"预留资源释放,或清除一阶段准备让二阶段提交时发出的消息缓存\"</span>);\n}\n</code></pre>\n<h2>切点表达式</h2>\n<h3>全局事务</h3>\n<pre><code class=\"language-java\">    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> AspectTransactionalInterceptor <span class=\"hljs-title\">aspectTransactionalInterceptor</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> AspectTransactionalInterceptor();\n    }\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Advisor <span class=\"hljs-title\">txAdviceAdvisor</span><span class=\"hljs-params\">(AspectTransactionalInterceptor aspectTransactionalInterceptor )</span> </span>{\n        AspectJExpressionPointcut pointcut = <span class=\"hljs-keyword\">new</span> AspectJExpressionPointcut();\n        pointcut.setExpression(<span class=\"hljs-string\">\"配置切点表达式使全局事务拦截器生效\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> DefaultPointcutAdvisor(pointcut, aspectTransactionalInterceptor);\n    }\n</code></pre>\n",
  "link": "/zh-cn/docs/user/spring.html",
  "meta": {
    "title": "Seata Spring支持",
    "keywords": "Seata",
    "description": "Seata Spring支持。"
  }
}