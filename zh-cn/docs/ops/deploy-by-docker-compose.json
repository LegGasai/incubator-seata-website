{
  "filename": "deploy-by-docker-compose.md",
  "__html": "<h1>使用 docker-compose 部署 Seata Server</h1>\n<h2>历史版本部署</h2>\n<p><a href=\"https://seata.io/zh-cn/docs/ops/deploy-by-docker-compose-142.html\">1.5.0以前版本</a></p>\n<p><a href=\"https://seata.io/zh-cn/docs/ops/deploy-by-docker-compose.html\">1.5.0以后版本(含1.5.0)</a></p>\n<h2>注意事项</h2>\n<ul>\n<li>避免直接拉取latest版本镜像，latest版本并不一定是released版本，为避免不必要的问题，请到<a href=\"https://hub.docker.com/r/seataio/seata-server/tags\">docker镜像仓库</a>确定要拉取的镜像版本。</li>\n<li>Seata Server 1.5.0版本开始，配置文件改为application.yml，所以在使用自定义配置的时候，需要先把原生配置拷贝出来。</li>\n</ul>\n<h2>使用自定义配置文件</h2>\n<p>为了获取seata server 1.5.0的配置文件，我们需要先启动一个seata server 1.5.0的服务，然后再从启动的容器实例中把默认的配置文件复制出来，再进行修改。</p>\n<p>docker-compose.yaml</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">\"3.1\"</span>\n<span class=\"hljs-attr\">services:</span>\n<span class=\"hljs-attr\">  seata-server:</span>\n<span class=\"hljs-attr\">    image:</span> <span class=\"hljs-string\">seataio/seata-server:${latest-release-version}</span>\n<span class=\"hljs-attr\">    ports:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"7091:7091\"</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"8091:8091\"</span>\n</code></pre>\n<p>接下来通过<code>docker cp</code>命令把容器中<code>/seata-server/resources</code>位置的资源文件拷贝到宿主机指定位置。\n在宿主机指定位置我们就可以看到对应的<code>application.yml</code>配置文件，相关的配置只需要修改这个文件即可。</p>\n<blockquote>\n<p><code>application.yml</code>配置可参考<a href=\"https://github.com/seata/seata/blob/develop/server/src/main/resources/application.example.yml\">application.example.yml</a></p>\n</blockquote>\n<h2>快速开始</h2>\n<ul>\n<li><a href=\"#file-file\">无注册中心，file存储</a></li>\n<li><a href=\"#file-db\">无注册中心，db存储</a></li>\n<li><a href=\"#nacos-db\">nacos注册中心，db存储</a></li>\n<li><a href=\"#ha-nacos-db\">高可用部署</a></li>\n</ul>\n<h3><a id=\"file-file\">无注册中心，file存储</a></h3>\n<p>该模式下，不需要注册中心，也不需要任何第三方存储中心。</p>\n<p>docker-compose.yaml</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">\"3.1\"</span>\n<span class=\"hljs-attr\">services:</span>\n<span class=\"hljs-attr\">  seata-server:</span>\n<span class=\"hljs-attr\">    image:</span> <span class=\"hljs-string\">seataio/seata-server:${latest-release-version}</span>\n<span class=\"hljs-attr\">    hostname:</span> <span class=\"hljs-string\">seata-server</span>\n<span class=\"hljs-attr\">    ports:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"7091:7091\"</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"8091:8091\"</span>\n<span class=\"hljs-attr\">    environment:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">SEATA_PORT=8091</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">STORE_MODE=file</span>\n</code></pre>\n<h3><a id=\"file-db\">无注册中心，DB存储</a></h3>\n<blockquote>\n<p>db模式需要在数据库创建对应的表结构，<a href=\"https://github.com/seata/seata/tree/develop/script/server/db\">[建表脚本]</a>。</p>\n</blockquote>\n<p><strong>（1）application.yml配置文件</strong></p>\n<p><code>application.yml</code>配置可参考<a href=\"https://github.com/seata/seata/blob/develop/server/src/main/resources/application.example.yml\">application.example.yml</a></p>\n<p>更多存储模式支持可参考<a href=\"https://github.com/seata/seata/blob/develop/script/config-center/config.txt\">更多存储模式</a></p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">server:</span>\n<span class=\"hljs-attr\">  port:</span> <span class=\"hljs-number\">7091</span>\n\n<span class=\"hljs-attr\">spring:</span>\n<span class=\"hljs-attr\">  application:</span>\n<span class=\"hljs-attr\">    name:</span> <span class=\"hljs-string\">seata-server</span>\n\n<span class=\"hljs-attr\">logging:</span>\n<span class=\"hljs-attr\">  config:</span> <span class=\"hljs-attr\">classpath:logback-spring.xml</span>\n<span class=\"hljs-attr\">  file:</span>\n<span class=\"hljs-attr\">    path:</span> <span class=\"hljs-string\">${user.home}/logs/seata</span>\n<span class=\"hljs-attr\">  extend:</span>\n<span class=\"hljs-attr\">    logstash-appender:</span>\n<span class=\"hljs-attr\">      destination:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:4560</span>\n<span class=\"hljs-attr\">    kafka-appender:</span>\n<span class=\"hljs-attr\">      bootstrap-servers:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:9092</span>\n<span class=\"hljs-attr\">      topic:</span> <span class=\"hljs-string\">logback_to_logstash</span>\n\n<span class=\"hljs-attr\">console:</span>\n<span class=\"hljs-attr\">  user:</span>\n<span class=\"hljs-attr\">    username:</span> <span class=\"hljs-string\">seata</span>\n<span class=\"hljs-attr\">    password:</span> <span class=\"hljs-string\">seata</span>\n\n<span class=\"hljs-attr\">seata:</span>\n<span class=\"hljs-attr\">  config:</span>\n    <span class=\"hljs-comment\"># support: nacos, consul, apollo, zk, etcd3</span>\n<span class=\"hljs-attr\">    type:</span> <span class=\"hljs-string\">file</span>\n<span class=\"hljs-attr\">  registry:</span>\n    <span class=\"hljs-comment\"># support: nacos, eureka, redis, zk, consul, etcd3, sofa</span>\n<span class=\"hljs-attr\">    type:</span> <span class=\"hljs-string\">file</span>\n<span class=\"hljs-attr\">  store:</span>\n    <span class=\"hljs-comment\"># support: file 、 db 、 redis</span>\n<span class=\"hljs-attr\">    mode:</span> <span class=\"hljs-string\">db</span>\n<span class=\"hljs-attr\">    db:</span>\n<span class=\"hljs-attr\">      datasource:</span> <span class=\"hljs-string\">druid</span>\n<span class=\"hljs-attr\">      dbType:</span> <span class=\"hljs-string\">mysql</span>\n      <span class=\"hljs-comment\"># 需要根据mysql的版本调整driverClassName</span>\n      <span class=\"hljs-comment\"># mysql8及以上版本对应的driver：com.mysql.cj.jdbc.Driver</span>\n      <span class=\"hljs-comment\"># mysql8以下版本的driver：com.mysql.jdbc.Driver</span>\n<span class=\"hljs-attr\">      driverClassName:</span> <span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"hljs-attr\">      url:</span> <span class=\"hljs-attr\">jdbc:mysql://127.0.0.1:3306/seata-server?useUnicode=true&amp;characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false</span>\n<span class=\"hljs-attr\">      user:</span> <span class=\"hljs-string\">用户名</span>\n<span class=\"hljs-attr\">      password:</span> <span class=\"hljs-string\">密码</span>\n      \n  <span class=\"hljs-comment\">#  server:</span>\n  <span class=\"hljs-comment\">#    service-port: 8091 #If not configured, the default is '${server.port} + 1000'</span>\n<span class=\"hljs-attr\">  security:</span>\n<span class=\"hljs-attr\">    secretKey:</span> <span class=\"hljs-string\">SeataSecretKey0c382ef121d778043159209298fd40bf3850a017</span>\n<span class=\"hljs-attr\">    tokenValidityInMilliseconds:</span> <span class=\"hljs-number\">1800000</span>\n<span class=\"hljs-attr\">    ignore:</span>\n<span class=\"hljs-attr\">      urls:</span> <span class=\"hljs-string\">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/api/v1/auth/login</span>\n</code></pre>\n<p><strong>（2）准备docker-compose.yaml文件</strong></p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">\"3.1\"</span>\n<span class=\"hljs-attr\">services:</span>\n<span class=\"hljs-attr\">  seata-server:</span>\n<span class=\"hljs-attr\">    image:</span> <span class=\"hljs-string\">seataio/seata-server:1.5.2</span>\n<span class=\"hljs-attr\">    ports:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"7091:7091\"</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"8091:8091\"</span>\n<span class=\"hljs-attr\">    environment:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">STORE_MODE=db</span>\n      <span class=\"hljs-comment\"># 以SEATA_IP作为host注册seata server</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">SEATA_IP=seata_ip</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">SEATA_PORT=8091</span>\n<span class=\"hljs-attr\">    volumes:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime\"</span>        <span class=\"hljs-comment\">#设置系统时区</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"/usr/share/zoneinfo/Asia/Shanghai:/etc/timezone\"</span>  <span class=\"hljs-comment\">#设置时区</span>\n      <span class=\"hljs-comment\"># 假设我们通过docker cp命令把资源文件拷贝到相对路径`./seata-server/resources`中</span>\n      <span class=\"hljs-comment\"># 如有问题，请阅读上面的[注意事项]以及[使用自定义配置文件]</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"./seata-server/resources:/seata-server/resources\"</span>\n</code></pre>\n<h3><a id=\"nacos-db\">nacos注册中心，db存储</a></h3>\n<blockquote>\n<p>db模式需要在数据库创建对应的表结构，<a href=\"https://github.com/seata/seata/tree/develop/script/server/db\">[建表脚本]</a>。</p>\n</blockquote>\n<p><strong>（1）application.yml配置文件</strong></p>\n<p><code>application.yml</code>配置可参考<a href=\"https://github.com/seata/seata/blob/develop/server/src/main/resources/application.example.yml\">application.example.yml</a></p>\n<p>nacos注册中心。</p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">server:</span>\n<span class=\"hljs-attr\">  port:</span> <span class=\"hljs-number\">7091</span>\n\n<span class=\"hljs-attr\">spring:</span>\n<span class=\"hljs-attr\">  application:</span>\n<span class=\"hljs-attr\">    name:</span> <span class=\"hljs-string\">seata-server</span>\n\n<span class=\"hljs-attr\">logging:</span>\n<span class=\"hljs-attr\">  config:</span> <span class=\"hljs-attr\">classpath:logback-spring.xml</span>\n<span class=\"hljs-attr\">  file:</span>\n<span class=\"hljs-attr\">    path:</span> <span class=\"hljs-string\">${user.home}/logs/seata</span>\n<span class=\"hljs-attr\">  extend:</span>\n<span class=\"hljs-attr\">    logstash-appender:</span>\n<span class=\"hljs-attr\">      destination:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:4560</span>\n<span class=\"hljs-attr\">    kafka-appender:</span>\n<span class=\"hljs-attr\">      bootstrap-servers:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:9092</span>\n<span class=\"hljs-attr\">      topic:</span> <span class=\"hljs-string\">logback_to_logstash</span>\n\n<span class=\"hljs-attr\">console:</span>\n<span class=\"hljs-attr\">  user:</span>\n<span class=\"hljs-attr\">    username:</span> <span class=\"hljs-string\">seata</span>\n<span class=\"hljs-attr\">    password:</span> <span class=\"hljs-string\">seata</span>\n\n<span class=\"hljs-attr\">seata:</span>\n<span class=\"hljs-attr\">  config:</span>\n    <span class=\"hljs-comment\"># support: nacos, consul, apollo, zk, etcd3</span>\n<span class=\"hljs-attr\">    type:</span> <span class=\"hljs-string\">nacos</span>\n<span class=\"hljs-attr\">    nacos:</span>\n<span class=\"hljs-attr\">      server-addr:</span> <span class=\"hljs-attr\">nacos_ip:nacos_port</span>\n<span class=\"hljs-attr\">      namespace:</span> <span class=\"hljs-string\">seata-server</span>\n<span class=\"hljs-attr\">      group:</span> <span class=\"hljs-string\">SEATA_GROUP</span>\n<span class=\"hljs-attr\">      username:</span> <span class=\"hljs-string\">nacos</span>\n<span class=\"hljs-attr\">      password:</span> <span class=\"hljs-string\">nacos</span>\n<span class=\"hljs-attr\">      data-id:</span> <span class=\"hljs-string\">seataServer.properties</span>\n\n<span class=\"hljs-attr\">  registry:</span>\n    <span class=\"hljs-comment\"># support: nacos, eureka, redis, zk, consul, etcd3, sofa</span>\n<span class=\"hljs-attr\">    type:</span> <span class=\"hljs-string\">nacos</span>\n<span class=\"hljs-attr\">    nacos:</span>\n<span class=\"hljs-attr\">      application:</span> <span class=\"hljs-string\">seata-server</span>\n<span class=\"hljs-attr\">      server-addr:</span> <span class=\"hljs-attr\">nacos_ip:nacos_port</span>\n<span class=\"hljs-attr\">      group:</span> <span class=\"hljs-string\">SEATA_GROUP</span>\n<span class=\"hljs-attr\">      namespace:</span> <span class=\"hljs-string\">seata-server</span>\n      <span class=\"hljs-comment\"># tc集群名称</span>\n<span class=\"hljs-attr\">      cluster:</span> <span class=\"hljs-string\">default</span>\n<span class=\"hljs-attr\">      username:</span> <span class=\"hljs-string\">nacos</span>\n<span class=\"hljs-attr\">      password:</span> <span class=\"hljs-string\">nacos</span>\n<span class=\"hljs-comment\">#  server:</span>\n<span class=\"hljs-comment\">#    service-port: 8091 #If not configured, the default is '${server.port} + 1000'</span>\n<span class=\"hljs-attr\">  security:</span>\n<span class=\"hljs-attr\">    secretKey:</span> <span class=\"hljs-string\">SeataSecretKey0c382ef121d778043159209298fd40bf3850a017</span>\n<span class=\"hljs-attr\">    tokenValidityInMilliseconds:</span> <span class=\"hljs-number\">1800000</span>\n<span class=\"hljs-attr\">    ignore:</span>\n<span class=\"hljs-attr\">      urls:</span> <span class=\"hljs-string\">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/api/v1/auth/login</span>\n</code></pre>\n<p><strong>（2）准备nacos配置中心配置</strong></p>\n<p>更多存储模式支持可参考<a href=\"https://github.com/seata/seata/blob/develop/script/config-center/config.txt\">更多存储模式</a></p>\n<blockquote>\n<p>你需要在nacos新建配置，此处dataId为seataServer.properties</p>\n</blockquote>\n<pre><code class=\"language-properties\"><span class=\"hljs-meta\">store.mode</span>=<span class=\"hljs-string\">db</span>\n<span class=\"hljs-comment\">#-----db-----</span>\n<span class=\"hljs-meta\">store.db.datasource</span>=<span class=\"hljs-string\">druid</span>\n<span class=\"hljs-meta\">store.db.dbType</span>=<span class=\"hljs-string\">mysql</span>\n<span class=\"hljs-comment\"># 需要根据mysql的版本调整driverClassName</span>\n<span class=\"hljs-comment\"># mysql8及以上版本对应的driver：com.mysql.cj.jdbc.Driver</span>\n<span class=\"hljs-comment\"># mysql8以下版本的driver：com.mysql.jdbc.Driver</span>\n<span class=\"hljs-meta\">store.db.driverClassName</span>=<span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"hljs-meta\">store.db.url</span>=<span class=\"hljs-string\">jdbc:mysql://127.0.0.1:3306/seata-server?useUnicode=true&amp;characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false</span>\n<span class=\"hljs-meta\">store.db.user</span>= <span class=\"hljs-string\">用户名</span>\n<span class=\"hljs-meta\">store.db.password</span>=<span class=\"hljs-string\">密码</span>\n<span class=\"hljs-comment\"># 数据库初始连接数</span>\n<span class=\"hljs-meta\">store.db.minConn</span>=<span class=\"hljs-string\">1</span>\n<span class=\"hljs-comment\"># 数据库最大连接数</span>\n<span class=\"hljs-meta\">store.db.maxConn</span>=<span class=\"hljs-string\">20</span>\n<span class=\"hljs-comment\"># 获取连接时最大等待时间 默认5000，单位毫秒</span>\n<span class=\"hljs-meta\">store.db.maxWait</span>=<span class=\"hljs-string\">5000</span>\n<span class=\"hljs-comment\"># 全局事务表名 默认global_table</span>\n<span class=\"hljs-meta\">store.db.globalTable</span>=<span class=\"hljs-string\">global_table</span>\n<span class=\"hljs-comment\"># 分支事务表名 默认branch_table</span>\n<span class=\"hljs-meta\">store.db.branchTable</span>=<span class=\"hljs-string\">branch_table</span>\n<span class=\"hljs-comment\"># 全局锁表名 默认lock_table</span>\n<span class=\"hljs-meta\">store.db.lockTable</span>=<span class=\"hljs-string\">lock_table</span>\n<span class=\"hljs-comment\"># 查询全局事务一次的最大条数 默认100</span>\n<span class=\"hljs-meta\">store.db.queryLimit</span>=<span class=\"hljs-string\">100</span>\n<span class=\"hljs-comment\">\n\n# undo保留天数 默认7天,log_status=1（附录3）和未正常清理的undo</span>\n<span class=\"hljs-meta\">server.undo.logSaveDays</span>=<span class=\"hljs-string\">7</span>\n<span class=\"hljs-comment\"># undo清理线程间隔时间 默认86400000，单位毫秒</span>\n<span class=\"hljs-meta\">server.undo.logDeletePeriod</span>=<span class=\"hljs-string\">86400000</span>\n<span class=\"hljs-comment\"># 二阶段提交重试超时时长 单位ms,s,m,h,d,对应毫秒,秒,分,小时,天,默认毫秒。默认值-1表示无限重试</span>\n<span class=\"hljs-comment\"># 公式: timeout&gt;=now-globalTransactionBeginTime,true表示超时则不再重试</span>\n<span class=\"hljs-comment\"># 注: 达到超时时间后将不会做任何重试,有数据不一致风险,除非业务自行可校准数据,否者慎用</span>\n<span class=\"hljs-meta\">server.maxCommitRetryTimeout</span>=<span class=\"hljs-string\">-1</span>\n<span class=\"hljs-comment\"># 二阶段回滚重试超时时长</span>\n<span class=\"hljs-meta\">server.maxRollbackRetryTimeout</span>=<span class=\"hljs-string\">-1</span>\n<span class=\"hljs-comment\"># 二阶段提交未完成状态全局事务重试提交线程间隔时间 默认1000，单位毫秒</span>\n<span class=\"hljs-meta\">server.recovery.committingRetryPeriod</span>=<span class=\"hljs-string\">1000</span>\n<span class=\"hljs-comment\"># 二阶段异步提交状态重试提交线程间隔时间 默认1000，单位毫秒</span>\n<span class=\"hljs-meta\">server.recovery.asynCommittingRetryPeriod</span>=<span class=\"hljs-string\">1000</span>\n<span class=\"hljs-comment\"># 二阶段回滚状态重试回滚线程间隔时间  默认1000，单位毫秒</span>\n<span class=\"hljs-meta\">server.recovery.rollbackingRetryPeriod</span>=<span class=\"hljs-string\">1000</span>\n<span class=\"hljs-comment\"># 超时状态检测重试线程间隔时间 默认1000，单位毫秒，检测出超时将全局事务置入回滚会话管理器</span>\n<span class=\"hljs-meta\">server.recovery.timeoutRetryPeriod</span>=<span class=\"hljs-string\">1000</span>\n</code></pre>\n<p><strong>（3）准备docker-compose.yaml文件</strong></p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">\"3.1\"</span>\n<span class=\"hljs-attr\">services:</span>\n<span class=\"hljs-attr\">  seata-server:</span>\n<span class=\"hljs-attr\">    image:</span> <span class=\"hljs-string\">seataio/seata-server:1.5.2</span>\n<span class=\"hljs-attr\">    ports:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"7091:7091\"</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"8091:8091\"</span>\n<span class=\"hljs-attr\">    environment:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">STORE_MODE=db</span>\n      <span class=\"hljs-comment\"># 以SEATA_IP作为host注册seata server</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">SEATA_IP=seata_ip</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">SEATA_PORT=8091</span>\n<span class=\"hljs-attr\">    volumes:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime\"</span>        <span class=\"hljs-comment\">#设置系统时区</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"/usr/share/zoneinfo/Asia/Shanghai:/etc/timezone\"</span>  <span class=\"hljs-comment\">#设置时区</span>\n      <span class=\"hljs-comment\"># 假设我们通过docker cp命令把资源文件拷贝到相对路径`./seata-server/resources`中</span>\n      <span class=\"hljs-comment\"># 如有问题，请阅读上面的[注意事项]以及[使用自定义配置文件]</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"./seata-server/resources:/seata-server/resources\"</span>\n</code></pre>\n<h3><a id=\"ha-nacos-db\">高可用部署</a></h3>\n<blockquote>\n<p>seata高可用依赖于注册中心、数据库，可不依赖配置中心。</p>\n<p>请保证多个Seata Server使用同一个注册中心和同一个存储中心，这样才能形成高可用部署</p>\n</blockquote>\n<blockquote>\n<p>db模式需要在数据库创建对应的表结构，<a href=\"https://github.com/seata/seata/tree/develop/script/server/db\">[建表脚本]</a>。</p>\n</blockquote>\n<p><strong>（1）application.yml配置文件</strong></p>\n<p><code>application.yml</code>配置可参考<a href=\"https://github.com/seata/seata/blob/develop/server/src/main/resources/application.example.yml\">application.example.yml</a></p>\n<p>更多存储模式支持可参考<a href=\"https://github.com/seata/seata/blob/develop/script/config-center/config.txt\">更多存储模式</a></p>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">server:</span>\n<span class=\"hljs-attr\">  port:</span> <span class=\"hljs-number\">7091</span>\n\n<span class=\"hljs-attr\">spring:</span>\n<span class=\"hljs-attr\">  application:</span>\n<span class=\"hljs-attr\">    name:</span> <span class=\"hljs-string\">seata-server</span>\n\n<span class=\"hljs-attr\">logging:</span>\n<span class=\"hljs-attr\">  config:</span> <span class=\"hljs-attr\">classpath:logback-spring.xml</span>\n<span class=\"hljs-attr\">  file:</span>\n<span class=\"hljs-attr\">    path:</span> <span class=\"hljs-string\">${user.home}/logs/seata</span>\n<span class=\"hljs-attr\">  extend:</span>\n<span class=\"hljs-attr\">    logstash-appender:</span>\n<span class=\"hljs-attr\">      destination:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:4560</span>\n<span class=\"hljs-attr\">    kafka-appender:</span>\n<span class=\"hljs-attr\">      bootstrap-servers:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><span class=\"hljs-string\">:9092</span>\n<span class=\"hljs-attr\">      topic:</span> <span class=\"hljs-string\">logback_to_logstash</span>\n\n<span class=\"hljs-attr\">console:</span>\n<span class=\"hljs-attr\">  user:</span>\n<span class=\"hljs-attr\">    username:</span> <span class=\"hljs-string\">seata</span>\n<span class=\"hljs-attr\">    password:</span> <span class=\"hljs-string\">seata</span>\n\n<span class=\"hljs-attr\">seata:</span>\n<span class=\"hljs-attr\">  config:</span>\n    <span class=\"hljs-comment\"># support: nacos, consul, apollo, zk, etcd3</span>\n<span class=\"hljs-attr\">    type:</span> <span class=\"hljs-string\">nacos</span>\n<span class=\"hljs-attr\">    nacos:</span>\n<span class=\"hljs-attr\">      server-addr:</span> <span class=\"hljs-attr\">nacos_ip:nacos_port</span>\n<span class=\"hljs-attr\">      namespace:</span> <span class=\"hljs-string\">seata-server</span>\n<span class=\"hljs-attr\">      group:</span> <span class=\"hljs-string\">SEATA_GROUP</span>\n<span class=\"hljs-attr\">      usernam:</span> <span class=\"hljs-string\">nacos</span>\n<span class=\"hljs-attr\">      password:</span> <span class=\"hljs-string\">nacos</span>\n<span class=\"hljs-attr\">      data-id:</span> <span class=\"hljs-string\">seataServer.properties</span>\n\n<span class=\"hljs-attr\">  registry:</span>\n    <span class=\"hljs-comment\"># support: nacos, eureka, redis, zk, consul, etcd3, sofa</span>\n<span class=\"hljs-attr\">    type:</span> <span class=\"hljs-string\">nacos</span>\n<span class=\"hljs-attr\">    nacos:</span>\n<span class=\"hljs-attr\">      application:</span> <span class=\"hljs-string\">seata-server</span>\n<span class=\"hljs-attr\">      server-addr:</span> <span class=\"hljs-attr\">nacos_ip:nacos_port</span>\n<span class=\"hljs-attr\">      group:</span> <span class=\"hljs-string\">SEATA_GROUP</span>\n<span class=\"hljs-attr\">      namespace:</span> <span class=\"hljs-string\">seata-server</span>\n      <span class=\"hljs-comment\"># tc集群名称</span>\n<span class=\"hljs-attr\">      cluster:</span> <span class=\"hljs-string\">default</span>\n<span class=\"hljs-attr\">      username:</span> <span class=\"hljs-string\">nacos</span>\n<span class=\"hljs-attr\">      password:</span> <span class=\"hljs-string\">nacos</span>\n    <span class=\"hljs-comment\">#  store:</span>\n    <span class=\"hljs-comment\"># support: file 、 db 、 redis</span>\n  <span class=\"hljs-comment\">#    mode: file</span>\n  <span class=\"hljs-comment\">#  server:</span>\n  <span class=\"hljs-comment\">#    service-port: 8091 #If not configured, the default is '${server.port} + 1000'</span>\n<span class=\"hljs-attr\">  security:</span>\n<span class=\"hljs-attr\">    secretKey:</span> <span class=\"hljs-string\">SeataSecretKey0c382ef121d778043159209298fd40bf3850a017</span>\n<span class=\"hljs-attr\">    tokenValidityInMilliseconds:</span> <span class=\"hljs-number\">1800000</span>\n<span class=\"hljs-attr\">    ignore:</span>\n<span class=\"hljs-attr\">      urls:</span> <span class=\"hljs-string\">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/api/v1/auth/login</span>\n</code></pre>\n<p><strong>（2）准备nacos配置中心配置</strong></p>\n<p>更多存储模式支持可参考<a href=\"https://github.com/seata/seata/blob/develop/script/config-center/config.txt\">更多存储模式</a></p>\n<blockquote>\n<p>你需要在nacos新建配置，此处dataId为seataServer.properties</p>\n</blockquote>\n<pre><code class=\"language-properties\"><span class=\"hljs-meta\">store.mode</span>=<span class=\"hljs-string\">db</span>\n<span class=\"hljs-comment\">#-----db-----</span>\n<span class=\"hljs-meta\">store.db.datasource</span>=<span class=\"hljs-string\">druid</span>\n<span class=\"hljs-meta\">store.db.dbType</span>=<span class=\"hljs-string\">mysql</span>\n<span class=\"hljs-comment\"># 需要根据mysql的版本调整driverClassName</span>\n<span class=\"hljs-comment\"># mysql8及以上版本对应的driver：com.mysql.cj.jdbc.Driver</span>\n<span class=\"hljs-comment\"># mysql8以下版本的driver：com.mysql.jdbc.Driver</span>\n<span class=\"hljs-meta\">store.db.driverClassName</span>=<span class=\"hljs-string\">com.mysql.cj.jdbc.Driver</span>\n<span class=\"hljs-meta\">store.db.url</span>=<span class=\"hljs-string\">jdbc:mysql://127.0.0.1:3306/seata-server?useUnicode=true&amp;characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false</span>\n<span class=\"hljs-meta\">store.db.user</span>= <span class=\"hljs-string\">用户名</span>\n<span class=\"hljs-meta\">store.db.password</span>=<span class=\"hljs-string\">密码</span>\n<span class=\"hljs-comment\"># 数据库初始连接数</span>\n<span class=\"hljs-meta\">store.db.minConn</span>=<span class=\"hljs-string\">1</span>\n<span class=\"hljs-comment\"># 数据库最大连接数</span>\n<span class=\"hljs-meta\">store.db.maxConn</span>=<span class=\"hljs-string\">20</span>\n<span class=\"hljs-comment\"># 获取连接时最大等待时间 默认5000，单位毫秒</span>\n<span class=\"hljs-meta\">store.db.maxWait</span>=<span class=\"hljs-string\">5000</span>\n<span class=\"hljs-comment\"># 全局事务表名 默认global_table</span>\n<span class=\"hljs-meta\">store.db.globalTable</span>=<span class=\"hljs-string\">global_table</span>\n<span class=\"hljs-comment\"># 分支事务表名 默认branch_table</span>\n<span class=\"hljs-meta\">store.db.branchTable</span>=<span class=\"hljs-string\">branch_table</span>\n<span class=\"hljs-comment\"># 全局锁表名 默认lock_table</span>\n<span class=\"hljs-meta\">store.db.lockTable</span>=<span class=\"hljs-string\">lock_table</span>\n<span class=\"hljs-comment\"># 查询全局事务一次的最大条数 默认100</span>\n<span class=\"hljs-meta\">store.db.queryLimit</span>=<span class=\"hljs-string\">100</span>\n<span class=\"hljs-comment\">\n\n# undo保留天数 默认7天,log_status=1（附录3）和未正常清理的undo</span>\n<span class=\"hljs-meta\">server.undo.logSaveDays</span>=<span class=\"hljs-string\">7</span>\n<span class=\"hljs-comment\"># undo清理线程间隔时间 默认86400000，单位毫秒</span>\n<span class=\"hljs-meta\">server.undo.logDeletePeriod</span>=<span class=\"hljs-string\">86400000</span>\n<span class=\"hljs-comment\"># 二阶段提交重试超时时长 单位ms,s,m,h,d,对应毫秒,秒,分,小时,天,默认毫秒。默认值-1表示无限重试</span>\n<span class=\"hljs-comment\"># 公式: timeout&gt;=now-globalTransactionBeginTime,true表示超时则不再重试</span>\n<span class=\"hljs-comment\"># 注: 达到超时时间后将不会做任何重试,有数据不一致风险,除非业务自行可校准数据,否者慎用</span>\n<span class=\"hljs-meta\">server.maxCommitRetryTimeout</span>=<span class=\"hljs-string\">-1</span>\n<span class=\"hljs-comment\"># 二阶段回滚重试超时时长</span>\n<span class=\"hljs-meta\">server.maxRollbackRetryTimeout</span>=<span class=\"hljs-string\">-1</span>\n<span class=\"hljs-comment\"># 二阶段提交未完成状态全局事务重试提交线程间隔时间 默认1000，单位毫秒</span>\n<span class=\"hljs-meta\">server.recovery.committingRetryPeriod</span>=<span class=\"hljs-string\">1000</span>\n<span class=\"hljs-comment\"># 二阶段异步提交状态重试提交线程间隔时间 默认1000，单位毫秒</span>\n<span class=\"hljs-meta\">server.recovery.asynCommittingRetryPeriod</span>=<span class=\"hljs-string\">1000</span>\n<span class=\"hljs-comment\"># 二阶段回滚状态重试回滚线程间隔时间  默认1000，单位毫秒</span>\n<span class=\"hljs-meta\">server.recovery.rollbackingRetryPeriod</span>=<span class=\"hljs-string\">1000</span>\n<span class=\"hljs-comment\"># 超时状态检测重试线程间隔时间 默认1000，单位毫秒，检测出超时将全局事务置入回滚会话管理器</span>\n<span class=\"hljs-meta\">server.recovery.timeoutRetryPeriod</span>=<span class=\"hljs-string\">1000</span>\n</code></pre>\n<p><strong>（3）准备docker-compose.yaml文件</strong></p>\n<blockquote>\n<p>只要保持配置一致，seata服务可在一台机器上部署多实例，也可同时部署在多台不同的主机下面实现服务高可用。\n<a href=\"https://seata.io/zh-cn/docs/ops/deploy-ha.html\">高可用部署</a></p>\n</blockquote>\n<pre><code class=\"language-yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">\"3.1\"</span>\n<span class=\"hljs-attr\">services:</span>\n<span class=\"hljs-attr\">  seata-server-1:</span>\n<span class=\"hljs-attr\">    image:</span> <span class=\"hljs-string\">seataio/seata-server:${latest-release-version}</span>\n<span class=\"hljs-attr\">    ports:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"7091:7091\"</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"8091:8091\"</span>\n<span class=\"hljs-attr\">    environment:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">STORE_MODE=db</span>\n      <span class=\"hljs-comment\"># 以SEATA_IP作为host注册seata server</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">SEATA_IP=seata_ip</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">SEATA_PORT=8091</span>\n<span class=\"hljs-attr\">    volumes:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime\"</span>        <span class=\"hljs-comment\">#设置系统时区</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"/usr/share/zoneinfo/Asia/Shanghai:/etc/timezone\"</span>  <span class=\"hljs-comment\">#设置时区</span>\n      <span class=\"hljs-comment\"># 假设我们通过docker cp命令把资源文件拷贝到相对路径`./seata-server/resources`中</span>\n      <span class=\"hljs-comment\"># 如有问题，请阅读上面的[注意事项]以及[使用自定义配置文件]</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"./seata-server/resources:/seata-server/resources\"</span>\n\n<span class=\"hljs-attr\">  seata-server-2:</span>\n<span class=\"hljs-attr\">    image:</span> <span class=\"hljs-string\">seataio/seata-server:${latest-release-version}</span>\n<span class=\"hljs-attr\">    ports:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"7092:7091\"</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"8092:8091\"</span>\n<span class=\"hljs-attr\">    environment:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">STORE_MODE=db</span>\n      <span class=\"hljs-comment\"># 以SEATA_IP作为host注册seata server</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">SEATA_IP=seata_ip</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">SEATA_PORT=8092</span>\n<span class=\"hljs-attr\">    volumes:</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime\"</span>        <span class=\"hljs-comment\">#设置系统时区</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"/usr/share/zoneinfo/Asia/Shanghai:/etc/timezone\"</span>  <span class=\"hljs-comment\">#设置时区</span>\n      <span class=\"hljs-comment\"># 假设我们通过docker cp命令把资源文件拷贝到相对路径`./seata-server/resources`中</span>\n      <span class=\"hljs-comment\"># 如有问题，请阅读上面的[注意事项]以及[使用自定义配置文件]</span>\n<span class=\"hljs-bullet\">      -</span> <span class=\"hljs-string\">\"./seata-server/resources:/seata-server/resources\"</span>\n\n  <span class=\"hljs-comment\"># seata服务3......seata服务N</span>\n</code></pre>\n<h2>环境变量</h2>\n<p>seata-server 支持以下环境变量：</p>\n<ul>\n<li><strong>SEATA_IP</strong></li>\n</ul>\n<blockquote>\n<p>可选, 指定seata-server启动的IP, 该IP用于向注册中心注册时使用, 如eureka等</p>\n</blockquote>\n<ul>\n<li><strong>SEATA_PORT</strong></li>\n</ul>\n<blockquote>\n<p>可选, 指定seata-server启动的端口, 默认为 <code>8091</code></p>\n</blockquote>\n<ul>\n<li><strong>STORE_MODE</strong></li>\n</ul>\n<blockquote>\n<p>可选, 指定seata-server的事务日志存储方式, 支持<code>db</code>, <code>file</code>, <code>redis</code>(Seata-Server 1.3及以上版本支持), 默认是 <code>file</code></p>\n</blockquote>\n<ul>\n<li><strong>SERVER_NODE</strong></li>\n</ul>\n<blockquote>\n<p>可选, 用于指定seata-server节点ID, 如 <code>1</code>,<code>2</code>,<code>3</code>..., 默认为 <code>根据ip生成</code></p>\n</blockquote>\n<ul>\n<li><strong>SEATA_ENV</strong></li>\n</ul>\n<blockquote>\n<p>可选, 指定 seata-server 运行环境, 如 <code>dev</code>, <code>test</code> 等, 服务启动时会使用 <code>registry-dev.conf</code> 这样的配置</p>\n</blockquote>\n<ul>\n<li><strong>SEATA_CONFIG_NAME</strong></li>\n</ul>\n<blockquote>\n<p>可选, 指定配置文件位置, 如 <code>file:/root/registry</code>, 将会加载 <code>/root/registry.conf</code> 作为配置文件，如果需要同时指定 <code>file.conf</code>文件，需要将<code>registry.conf</code>的<code>config.file.name</code>的值改为类似<code>file:/root/file.conf</code>：</p>\n</blockquote>\n",
  "link": "/zh-cn/docs/ops/deploy-by-docker-compose.html",
  "meta": {
    "hidden": "true",
    "title": "使用 Docker compose 快速部署 Seata Server",
    "keywords": "docker-compose,ops",
    "description": "使用 Docker-compose 快速部署 Seata Server",
    "author": "zouwei",
    "date": "2022-09-06"
  }
}