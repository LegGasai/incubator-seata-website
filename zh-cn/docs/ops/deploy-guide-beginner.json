{
  "filename": "deploy-guide-beginner.md",
  "__html": "<h1>部署指南</h1>\n<h2>Seata新手部署指南</h2>\n<p>Seata分TC、TM和RM三个角色，TC（Server端）为单独服务端部署，TM和RM（Client端）由业务系统集成。</p>\n<h3>资源目录介绍</h3>\n<h4><a href=\"https://github.com/seata/seata/tree/master/script\" target=\"_blank\">点击查看(或根据版本分支选择对应的资源目录)</a></h4>\n<ul>\n<li>client</li>\n</ul>\n<blockquote>\n<p>存放client端sql脚本 (包含 undo_log表) ，参数配置</p>\n</blockquote>\n<ul>\n<li>config-center</li>\n</ul>\n<blockquote>\n<p>各个配置中心参数导入脚本，config.txt(包含server和client，原名nacos-config.txt)为通用参数文件</p>\n</blockquote>\n<ul>\n<li>server</li>\n</ul>\n<blockquote>\n<p>server端数据库脚本 (包含 lock_table、branch_table 与 global_table) 及各个容器配置</p>\n</blockquote>\n<h3>注意事项</h3>\n<ul>\n<li>seata-spring-boot-starter</li>\n</ul>\n<pre><code>内置GlobalTransactionScanner自动初始化功能，若外部实现初始化，请参考SeataAutoConfiguration保证依赖加载顺序\n默认开启数据源自动代理，可配置seata.enable-auto-data-source-proxy: false关闭\n</code></pre>\n<ul>\n<li>spring-cloud-starter-alibaba-seata</li>\n</ul>\n<blockquote>\n<p><a href=\"https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E\" target=\"_blank\">查看版本说明</a>\n2.1.0内嵌seata-all 0.7.1，2.1.1内嵌seata-all 0.9.0，2.2.0内嵌seata-spring-boot-starter 1.0.0, 2.2.1内嵌seata-spring-boot-starter 1.1.0</p>\n</blockquote>\n<pre><code>    2.1.0和2.1.1兼容starter解决方案:\n@SpringBootApplication注解内exclude掉spring-cloud-starter-alibaba-seata内的com.alibaba.cloud.seata.GlobalTransactionAutoConfiguration\n</code></pre>\n<ul>\n<li>spring-cloud-starter-alibaba-seata推荐依赖配置方式</li>\n</ul>\n<pre><code class=\"language-java\">           &lt;dependency&gt;\n                &lt;groupId&gt;io.seata&lt;/groupId&gt;\n                &lt;artifactId&gt;seata-spring-boot-starter&lt;/artifactId&gt;\n                &lt;version&gt;最新版&lt;/version&gt;\n            &lt;/dependency&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;\n                &lt;artifactId&gt;spring-cloud-starter-alibaba-seata&lt;/artifactId&gt;\n                &lt;version&gt;最新版本&lt;/version&gt;\n                &lt;exclusions&gt;\n                    &lt;exclusion&gt;\n                        &lt;groupId&gt;io.seata&lt;/groupId&gt;\n                        &lt;artifactId&gt;seata-spring-boot-starter&lt;/artifactId&gt;\n                    &lt;/exclusion&gt;\n                &lt;/exclusions&gt;\n            &lt;/dependency&gt;\n</code></pre>\n<h3>启动Server</h3>\n<p>Server端存储模式（store.mode）现有file、db、redis三种（后续将引入raft,mongodb），file模式无需改动，直接启动即可，下面专门讲下db和redis启动步骤。<br>\n注： file模式为单机模式，全局事务会话信息内存中读写并持久化本地文件root.data，性能较高;</p>\n<p>db模式为高可用模式，全局事务会话信息通过db共享，相应性能差些;</p>\n<p>redis模式Seata-Server 1.3及以上版本支持,性能较高,存在事务信息丢失风险,请提前配置合适当前场景的redis持久化配置.</p>\n<h4>步骤一：启动包</h4>\n<ul>\n<li><a href=\"https://github.com/seata/seata/releases\" target=\"_blank\">点击下载</a></li>\n<li>官方钉钉群（群号：23171167，1群5000人已满，<a href=\"http://seata.io/zh-cn/community/index.html\" target=\"_blank\">2群</a>, 3群: 32033786），qq群（群号: 254657148,2群: 216012363）群文件共享下载</li>\n</ul>\n<h4>步骤二：建表(仅db)</h4>\n<p>全局事务会话信息由3块内容构成，全局事务--&gt;分支事务--&gt;全局锁，对应表global_table、branch_table、lock_table</p>\n<h4>步骤三：修改store.mode</h4>\n<p>启动包: seata--&gt;conf--&gt;application.yml，修改store.mode=&quot;db或者redis&quot;<br>\n源码:   根目录--&gt;seata-server--&gt;resources--&gt;application.yml，修改store.mode=&quot;db或者redis&quot;</p>\n<p>1.5.0以下版本:</p>\n<p>启动包: seata--&gt;conf--&gt;file.conf，修改store.mode=&quot;db或者redis&quot;<br>\n源码:   根目录--&gt;seata-server--&gt;resources--&gt;file.conf，修改store.mode=&quot;db或者redis&quot;</p>\n<h4>步骤四：修改数据库连接|redis属性配置</h4>\n<p>启动包: seata--&gt;conf--&gt;application.example.yml中附带额外配置，将其db|redis相关配置复制至application.yml,进行修改store.db或store.redis相关属性。<br>\n源码:   根目录--&gt;seata-server--&gt;resources--&gt;application.example.yml中附带额外配置，将其db|redis相关配置复制至application.yml,进行修改store.db或store.redis相关属性。</p>\n<p>1.5.0以下版本:</p>\n<p>启动包: seata--&gt;conf--&gt;file.conf，修改store.db或store.redis相关属性。<br>\n源码:   根目录--&gt;seata-server--&gt;resources--&gt;file.conf，修改store.db或store.redis相关属性。</p>\n<h4>步骤五：启动</h4>\n<ul>\n<li>源码启动: 执行ServerApplication.java的main方法</li>\n<li>命令启动: <a href=\"http://seata-server.sh\">seata-server.sh</a> -h 127.0.0.1 -p 8091 -m db</li>\n</ul>\n<p>1.5.0以下版本</p>\n<ul>\n<li>源码启动: 执行Server.java的main方法</li>\n<li>命令启动: <a href=\"http://seata-server.sh\">seata-server.sh</a> -h 127.0.0.1 -p 8091 -m db -n 1 -e test</li>\n</ul>\n<pre><code>    -h: 注册到注册中心的ip\n    -p: Server rpc 监听端口\n    -m: 全局事务会话信息存储模式，file、db、redis，优先读取启动参数 (Seata-Server 1.3及以上版本支持redis)\n    -n: Server node，多个Server时，需区分各自节点，用于生成不同区间的transactionId，以免冲突\n    -e: 多环境配置参考 http://seata.io/en-us/docs/ops/multi-configuration-isolation.html\n</code></pre>\n<ul>\n<li><a href=\"https://seata.io/zh-cn/docs/ops/deploy-by-docker.html\" target=\"_blank\">点击查看docker部署</a></li>\n</ul>\n<p>注: 堆内存建议分配2G，堆外内存1G</p>\n<h3>业务系统集成Client</h3>\n<h4>步骤一：添加seata依赖（建议单选）</h4>\n<ul>\n<li>依赖seata-all</li>\n<li>依赖seata-spring-boot-starter，支持yml、properties配置(.conf可删除)，内部已依赖seata-all</li>\n<li>依赖spring-cloud-alibaba-seata，内部集成了seata，并实现了xid传递</li>\n</ul>\n<h4>步骤二：undo_log建表、配置参数(仅AT模式)</h4>\n<ul>\n<li><a href=\"https://seata.io/zh-cn/docs/user/configurations.html\" target=\"_blank\">查看参数配置介绍</a></li>\n</ul>\n<h4>步骤三：数据源代理（不支持自动和手动配置并存）</h4>\n<ol>\n<li>\n<p>如果使用seata-all</p>\n<ul>\n<li>\n<p>0.9.0版本开始seata支持自动代理数据源</p>\n<pre><code>1.1.0: seata-all取消属性配置，改由注解@EnableAutoDataSourceProxy开启，并可选择jdk proxy或者cglib proxy\n1.0.0: client.support.spring.datasource.autoproxy=true\n0.9.0: support.spring.datasource.autoproxy=true\n</code></pre>\n<p>如果采用XA模式，<code>@EnableAutoDataSourceProxy(dataSourceProxyMode = &quot;XA&quot;)</code></p>\n</li>\n<li>\n<p>手动配置可参考下方的例子</p>\n<pre><code>@Primary\n@Bean(&quot;dataSource&quot;)\npublic DataSource dataSource(DataSource druidDataSource) {\n    //AT 代理 二选一\n    return new DataSourceProxy(druidDataSource);\n    //XA 代理\n    return new DataSourceProxyXA(druidDataSource)\n}\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>如果使用seata-starter</p>\n<ul>\n<li>\n<p>使用自动代理数据源时，如果使用XA模式还需要调整配置文件<br>\napplication.properties</p>\n<pre><code>seata.data-source-proxy-mode=XA  \n</code></pre>\n<p>application.yml</p>\n<pre><code>seata:\n  data-source-proxy-mode: XA\n</code></pre>\n</li>\n<li>\n<p>如何关闭seata-spring-boot-starter的数据源自动代理？<br>\napplication.properties</p>\n<pre><code>seata.enable-auto-data-source-proxy=false  \n</code></pre>\n<p>application.yml</p>\n<pre><code>seata:\n  enable-auto-data-source-proxy: false\n</code></pre>\n</li>\n</ul>\n</li>\n</ol>\n<h4>步骤四：初始化GlobalTransactionScanner</h4>\n<ul>\n<li>手动</li>\n</ul>\n<pre><code class=\"language-@Bean\">       @Bean\n       public GlobalTransactionScanner globalTransactionScanner() {\n           String applicationName = this.applicationContext.getEnvironment().getProperty(&quot;spring.application.name&quot;);\n           String txServiceGroup = this.seataProperties.getTxServiceGroup();\n           if (StringUtils.isEmpty(txServiceGroup)) {\n               txServiceGroup = applicationName + &quot;-fescar-service-group&quot;;\n               this.seataProperties.setTxServiceGroup(txServiceGroup);\n           }\n   \n           return new GlobalTransactionScanner(applicationName, txServiceGroup);\n       }\n</code></pre>\n<ul>\n<li>自动，引入seata-spring-boot-starter、spring-cloud-starter-alibaba-seata等jar</li>\n</ul>\n<h4>步骤五：实现xid跨服务传递</h4>\n<ul>\n<li>手动\n参考源码integration文件夹下的各种rpc实现 module</li>\n<li>自动\nspringCloud用户可以引入spring-cloud-starter-alibaba-seata，内部已经实现xid传递</li>\n</ul>\n<h2>业务使用</h2>\n<h3>注解拦截</h3>\n<h4>全局事务</h4>\n<pre><code class=\"language-java\"><span class=\"hljs-meta\">@GetMapping</span>(value = <span class=\"hljs-string\">\"testCommit\"</span>)\n<span class=\"hljs-meta\">@GlobalTransactional</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Object <span class=\"hljs-title\">testCommit</span><span class=\"hljs-params\">(@RequestParam(name = <span class=\"hljs-string\">\"id\"</span>,defaultValue = <span class=\"hljs-string\">\"1\"</span>)</span> Integer id,\n    @<span class=\"hljs-title\">RequestParam</span><span class=\"hljs-params\">(name = <span class=\"hljs-string\">\"sum\"</span>, defaultValue = <span class=\"hljs-string\">\"1\"</span>)</span> Integer sum) </span>{\n    Boolean ok = productService.reduceStock(id, sum);\n    <span class=\"hljs-keyword\">if</span> (ok) {\n        LocalDateTime now = LocalDateTime.now();\n        Orders orders = <span class=\"hljs-keyword\">new</span> Orders();\n        orders.setCreateTime(now);\n        orders.setProductId(id);\n        orders.setReplaceTime(now);\n        orders.setSum(sum);\n        orderService.save(orders);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"ok\"</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"fail\"</span>;\n    }\n}\n</code></pre>\n<h4>TCC</h4>\n<pre><code class=\"language-java\"><span class=\"hljs-comment\">/**\n * 定义两阶段提交 name = 该tcc的bean名称,全局唯一 commitMethod = commit 为二阶段确认方法 rollbackMethod = rollback 为二阶段取消方法\n * useTCCFence=true 为开启防悬挂\n * BusinessActionContextParameter注解 传递参数到二阶段中\n *\n * <span class=\"hljs-doctag\">@param</span> params  -入参\n * <span class=\"hljs-doctag\">@return</span> String\n */</span>\n<span class=\"hljs-meta\">@TwoPhaseBusinessAction</span>(name = <span class=\"hljs-string\">\"beanName\"</span>, commitMethod = <span class=\"hljs-string\">\"commit\"</span>, rollbackMethod = <span class=\"hljs-string\">\"rollback\"</span>, useTCCFence = <span class=\"hljs-keyword\">true</span>)\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">insert</span><span class=\"hljs-params\">(@BusinessActionContextParameter(paramName = <span class=\"hljs-string\">\"params\"</span>)</span> Map&lt;String, String&gt; params) </span>{\n    logger.info(<span class=\"hljs-string\">\"此处可以预留资源,或者利用tcc的特点,与AT混用,二阶段时利用一阶段在此处存放的消息,通过二阶段发出,比如redis,mq等操作\"</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * 确认方法、可以另命名，但要保证与commitMethod一致 context可以传递try方法的参数\n *\n * <span class=\"hljs-doctag\">@param</span> context 上下文\n * <span class=\"hljs-doctag\">@return</span> boolean\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">commit</span><span class=\"hljs-params\">(BusinessActionContext context)</span> </span>{\n    logger.info(<span class=\"hljs-string\">\"预留资源真正处理,或者发出mq消息和redis入库\"</span>);\n}\n\n<span class=\"hljs-comment\">/**\n * 二阶段取消方法\n *\n * <span class=\"hljs-doctag\">@param</span> context 上下文\n * <span class=\"hljs-doctag\">@return</span> boolean\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title\">rollback</span><span class=\"hljs-params\">(BusinessActionContext context)</span> </span>{\n    logger.info(<span class=\"hljs-string\">\"预留资源释放,或清除一阶段准备让二阶段提交时发出的消息缓存\"</span>);\n}\n</code></pre>\n<h3>切点表达式</h3>\n<h4>全局事务</h4>\n<pre><code class=\"language-java\">    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> AspectTransactionalInterceptor <span class=\"hljs-title\">aspectTransactionalInterceptor</span> <span class=\"hljs-params\">()</span> </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> AspectTransactionalInterceptor();\n    }\n\n    <span class=\"hljs-meta\">@Bean</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> Advisor <span class=\"hljs-title\">txAdviceAdvisor</span><span class=\"hljs-params\">(AspectTransactionalInterceptor aspectTransactionalInterceptor )</span> </span>{\n        AspectJExpressionPointcut pointcut = <span class=\"hljs-keyword\">new</span> AspectJExpressionPointcut();\n        pointcut.setExpression(<span class=\"hljs-string\">\"配置切点表达式使全局事务拦截器生效\"</span>);\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> DefaultPointcutAdvisor(pointcut, aspectTransactionalInterceptor);\n    }\n</code></pre>\n",
  "link": "/zh-cn/docs/ops/deploy-guide-beginner.html",
  "meta": {
    "title": "Seata部署指南",
    "keywords": "Seata",
    "description": "Seata分TC、TM和RM三个角色，TC（Server端）为单独服务端部署，TM和RM（Client端）由业务系统集成。"
  }
}