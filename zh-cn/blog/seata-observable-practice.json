{
  "filename": "seata-observable-practice.md",
  "__html": "<h2>Seata简介</h2>\n<p>Seata的前身是阿里巴巴集团内大规模使用保证分布式事务一致性的中间件，Seata是其开源产品，由社区维护。在介绍Seata前，先与大家讨论下我们业务发展过程中经常遇到的一些问题场景。</p>\n<h3>业务场景</h3>\n<p>我们业务在发展的过程中，基本上都是从一个简单的应用，逐渐过渡到规模庞大、业务复杂的应用。这些复杂的场景难免遇到分布式事务管理问题，Seata的出现正是解决这些分布式场景下的事务管理问题。介绍下其中几个经典的场景：</p>\n<h4>场景一：分库分表场景下的分布式事务</h4>\n<p><img src=\"/img/blog/metrics-%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.png\" alt=\"image.png\">\n起初我们的业务规模小、轻量化，单一数据库就能保障我们的数据链路。但随着业务规模不断扩大、业务不断复杂化，通常单一数据库在容量、性能上会遭遇瓶颈。通常的解决方案是向分库、分表的架构演进。此时，即引入了<strong>分库分表场景下</strong>的分布式事务场景。</p>\n<h4>场景二：跨服务场景下的分布式事务</h4>\n<p><img src=\"/img/blog/metrics-%E8%B7%A8%E6%9C%8D%E5%8A%A1%E5%9C%BA%E6%99%AF%E4%B8%8B%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1.png\" alt=\"image.png\">\n降低单体应用复杂度的方案：应用微服务化拆分。拆分后，我们的产品由多个功能各异的微服务组件构成，每个微服务都使用独立的数据库资源。在涉及到跨服务调用的数据一致性场景时，就引入了<strong>跨服务场景下</strong>的分布式事务。</p>\n<h3>Seata架构</h3>\n<p><img src=\"/img/blog/metrics-Seata%E6%9E%B6%E6%9E%84.png\" alt=\"image.png\">\n其核心组件主要如下：</p>\n<ul>\n<li><strong>Transaction Coordinator（TC）</strong></li>\n</ul>\n<p>事务协调器，维护全局事务的运行状态，负责协调并驱动全局事务的提交或回滚。</p>\n<ul>\n<li><strong>Transaction Manager（TM）</strong></li>\n</ul>\n<p>控制全局事务的边界，负责开启一个全局事务，并最终发起全局提交或全局回滚的决议，TM定义全局事务的边界。</p>\n<ul>\n<li><strong>Resource Manager（RM）</strong></li>\n</ul>\n<p>控制分支事务，负责分支注册、状态汇报，并接收事务协调器的指令，驱动分支（本地）事务的提交和回滚。RM负责定义分支事务的边界和行为。</p>\n<h2>Seata的可观测实践</h2>\n<h3>为什么需要可观测？</h3>\n<ul>\n<li><strong>分布式事务消息链路较复杂</strong></li>\n</ul>\n<p>Seata在解决了用户易用性和分布式事务一致性这些问题的同时，需要多次TC与TM、RM之间的交互，尤其当微服务的链路变复杂时，Seata的交互链路也会呈正相关性增加。这种情况下，其实我们就需要引入可观测的能力来观察、分析事物链路。</p>\n<ul>\n<li><strong>异常链路、故障排查难定位，性能优化无从下手</strong></li>\n</ul>\n<p>在排查Seata的异常事务链路时，传统的方法需要看日志，这样检索起来比较麻烦。在引入可观测能力后，帮助我们直观的分析链路，快速定位问题；为优化耗时的事务链路提供依据。</p>\n<ul>\n<li><strong>可视化、数据可量化</strong></li>\n</ul>\n<p>可视化能力可让用户对事务执行情况有直观的感受；借助可量化的数据，可帮助用户评估资源消耗、规划预算。</p>\n<h3>可观测能力概览</h3>\n<table>\n<thead>\n<tr>\n<th><strong>可观测维度</strong></th>\n<th><strong>seata期望的能力</strong></th>\n<th><strong>技术选型参考</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Metrics</td>\n<td>功能层面：可按业务分组隔离，采集事务总量、耗时等重要指标</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>性能层面：高度量性能，插件按需加载\n架构层面：减少第三方依赖，服务端、客户端能够采用统一的架构，减少技术复杂度\n兼容性层面：至少兼容Prometheus生态 | Prometheus：指标存储和查询等领域有着业界领先的地位\nOpenTelemetry：可观测数据采集和规范的事实标准。但自身并不负责数据的存储，展示和分析 |\n| Tracing | 功能层面：全链路追踪分布式事务生命周期，反应分布式事务执行性能消耗\n易用性方面：对使用seata的用户而言简单易接入 | SkyWalking：利用Java的Agent探针技术，效率高，简单易用。 |\n| Logging | 功能层面：记录服务端、客户端全部生命周期信息\n易用性层面：能根据XID快速匹配全局事务对应链路日志 | Alibaba Cloud Service\nELK |</p>\n<h3>Metrics维度</h3>\n<h4>设计思路</h4>\n<ol>\n<li>Seata作为一个被集成的数据一致性框架，Metrics模块将尽可能少的使用第三方依赖以降低发生冲突的风险</li>\n<li>Metrics模块将竭力争取更高的度量性能和更低的资源开销，尽可能降低开启后带来的副作用</li>\n<li>配置时，Metrics是否激活、数据如何发布，取决于对应的配置；开启配置则自动启用，并默认将度量数据通过prometheusexporter的形式发布</li>\n<li>不使用Spring，使用SPI(Service Provider Interface)加载扩展</li>\n</ol>\n<h4>模块设计</h4>\n<p><img src=\"/img/blog/metrics-%E6%A8%A1%E5%9D%97%E8%AE%BE%E8%AE%A1.png\" alt=\"图片 1.png\"></p>\n<ul>\n<li>seata-metrics-core：Metrics核心模块，根据配置组织（加载）1个Registry和N个Exporter；</li>\n<li>seata-metrics-api：定义了Meter指标接口，Registry指标注册中心接口；</li>\n<li>seata-metrics-exporter-prometheus：内置的prometheus-exporter实现；</li>\n<li>seata-metrics-registry-compact：内置的Registry实现，并轻量级实现了Gauge、Counter、Summay、Timer指标；</li>\n</ul>\n<h4>metrics模块工作流</h4>\n<p><img src=\"/img/blog/metrics-%E6%A8%A1%E5%9D%97%E5%B7%A5%E4%BD%9C%E6%B5%81.png\" alt=\"图片 1.png\">\n上图是metrics模块的工作流，其工作流程如下：</p>\n<ol>\n<li>利用SPI机制，根据配置加载Exporter和Registry的实现类；</li>\n<li>基于消息订阅与通知机制，监听所有全局事务的状态变更事件，并publish到EventBus；</li>\n<li>事件订阅者消费事件，并将生成的metrics写入Registry；</li>\n<li>监控系统（如prometheus）从Exporter中拉取数据。</li>\n</ol>\n<h4>TC核心指标</h4>\n<p><img src=\"/img/blog/metrics-TC%E6%A0%B8%E5%BF%83%E6%8C%87%E6%A0%87.png\" alt=\"image.png\"></p>\n<h4>TM核心指标</h4>\n<p><img src=\"/img/blog/metrics-TM%E6%A0%B8%E5%BF%83%E6%8C%87%E6%A0%87.png\" alt=\"image.png\"></p>\n<h4>RM核心指标</h4>\n<p><img src=\"/img/blog/metrics-RM%E6%A0%B8%E5%BF%83%E6%8C%87%E6%A0%87.png\" alt=\"image.png\"></p>\n<h4>大盘展示</h4>\n<p><img src=\"/img/blog/metrics-%E5%A4%A7%E7%9B%98%E5%B1%95%E7%A4%BA.png\" alt=\"lQLPJxZhZlqESU3NBpjNBp6w8zYK6VbMgzYCoKVrWEDWAA_1694_1688.png\"></p>\n<h3>Tracing维度</h3>\n<h4>Seata为什么需要tracing？</h4>\n<ol>\n<li>对业务侧而言，引入Seata后，对业务性能会带来多大损耗？主要时间消耗在什么地方？如何针对性的优化业务逻辑？这些都是未知的。</li>\n<li>Seata的所有消息记录都通过日志持久化落盘，但对不了解Seata的用户而言，日志非常不友好。能否通过接入Tracing，提升事务链路排查效率？</li>\n<li>对于新手用户，可通过Tracing记录，快速了解seata的工作原理，降低seata使用门槛。</li>\n</ol>\n<h4>Seata的tracing解决方案</h4>\n<ul>\n<li>Seata在自定义的RPC消息协议中定义了Header信息；</li>\n<li>SkyWalking拦截指定的RPC消息，并注入tracing相关的span信息；</li>\n<li>以RPC消息的发出&amp;接收为临界点，定义了span的生命周期范围。</li>\n</ul>\n<p>基于上述的方式，Seata实现了事务全链路的tracing，具体接入可参考<a href=\"https://seata.io/zh-cn/docs/user/apm/skywalking.html\">为[Seata应用 | Seata-server]接入Skywalking</a>。</p>\n<h4>tracing效果</h4>\n<ul>\n<li>基于的demo场景：</li>\n</ul>\n<ol>\n<li>用户请求交易服务</li>\n<li>交易服务锁定库存</li>\n<li>交易服务创建账单</li>\n<li>账单服务进行扣款</li>\n</ol>\n<p><img src=\"/img/blog/metrics-tracing%E6%95%88%E6%9E%9C-%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E5%9B%BE.png\" alt=\"image.png\"></p>\n<ul>\n<li>GlobalCommit成功的事务链路（事例）</li>\n</ul>\n<p><img src=\"/img/blog/metrics-tracing%E6%95%88%E6%9E%9C-tracing%E9%93%BE1.png\" alt=\"image.png\">\n<img src=\"/img/blog/metrics-tracing%E6%95%88%E6%9E%9C-tracing%E9%93%BE2.png\" alt=\"image.png\">\n<img src=\"/img/blog/metrics-tracing%E6%95%88%E6%9E%9C-tracing%E9%93%BE3.png\" alt=\"image.png\"></p>\n<h3>Logging维度</h3>\n<h4>设计思路</h4>\n<p><img src=\"/img/blog/metrics-logging%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF.png\" alt=\"image.png\">\nLogging这一块其实承担的是可观测这几个维度当中的兜底角色。放在最底层的，其实就是我们日志格式的设计，只有好日志格式，我们才能对它进行更好的采集、模块化的存储和展示。在其之上，是日志的采集、存储、监控、告警、数据可视化，这些模块更多的是有现成的工具，比如阿里的SLS日志服务、还有ELK的一套技术栈，我们更多是将开销成本、接入复杂度、生态繁荣度等作为考量。</p>\n<h4>日志格式设计</h4>\n<p>这里拿Seata-Server的一个日志格式作为案例：\n<img src=\"/img/blog/metrics-logging%E6%97%A5%E5%BF%97%E6%95%88%E6%9E%9C.png\" alt=\"image.png\"></p>\n<ul>\n<li>线程池规范命名：当线程池、线程比较多时，规范的线程命名能将无序执行的线程执行次序清晰展示。</li>\n<li>方法全类名可追溯：快速定位到具体的代码块。</li>\n<li>重点运行时信息透出：重点突出关键日志，不关键的日志不打印，减少日志冗余。</li>\n<li>消息格式可扩展：通过扩展消息类的输出格式，减少日志的代码修改量。</li>\n</ul>\n<h2>总结&amp;展望</h2>\n<h4>Metrics</h4>\n<p>总结：基本实现分布式事务的可量化、可观测。\n展望：更细粒度的指标、更广阔的生态兼容。</p>\n<h4>Tracing</h4>\n<p>总结：分布式事务全链路的可追溯。\n展望：根据xid追溯事务链路，异常链路根因快速定位。</p>\n<h4>Logging</h4>\n<p>总结：结构化的日志格式。\n展望：日志可观测体系演进。</p>\n",
  "link": "/zh-cn/blog/seata-observable-practice.html",
  "meta": {
    "title": "Seata的可观测实践",
    "keywords": "Seata、分布式事务、数据一致性、微服务、可观测",
    "description": "本文介绍Seata在可观测领域的探索和实践",
    "author": "刘戎-Seata",
    "date": "2023/06/25"
  }
}